основные операторы

clc - очистка экрана
format short - представление десятичных чисел в консоли коротком виде
format compact - убирает лишние пробелы в консоли при вводе значений 
edit - вызывает редактор функций или набора исполняемых команд
clear all - удаляет все записанные ранее переменные
help - вызов справки внутри Матлаба
pi - число пи
' (апостроф) - транспонирование
= - это оператор присваивания

пример: a = 10;

== - логическое равно
~ - логическое не
|| - логическое или
&& - логическое и
% - комментарий
fix(x) - отбрасывает дробную часть числа, оставляя целую часть
mod(n,m) - выдает остаток от деления числа n на число m
Пример: mod(23,5) равен 3

; - скрывает значение операции в консоли. Но операция выполняется. 

1. Функции - основной инструмент при программировании в Matlab
Название файла функции должно совпадать с именем функции.
Файл с кодом функции должен лежать в корневой папке для Matlab (можно назначить любую папку)
формат функции: 

function [param1,param2,...] = <function name>(imput param 1, imput param 2, ...)
<тело функции>
end

<function name> - угловые скобки означают, что вы можете менять эту часть программы полностью по своему желанию.
<function name> должен совпадать с именем файла, где хранится функция

param1,param2 - передаваемые вне параметры при выполнении функции (результат);
imput param 1, imput param 2 - глобальные переменные, используемые внутри функции.  

Пример: функция поиска первого простого числа после любого заданного n:

function k = next_prime(n)

k = n;
if isprime(n) %проверка в Matlab на простоту числа
    k = k+1;
end;    
while ~isprime(k)     
    k = k+1;
end;
 if k==n 
     error('Такого простого числа подобрать не удалось');
 end
end


Результат: 

a = next_prime(8)

a =
 11

2. Задание математической функции
<function name> =  @(x) <function determination>
Задаваемая функция имеет тип  function_handle

Пример: 
y = @(x) x*x %функция возведения в квадрат


Тогда вызов функции 
y(10) <Enter>
ans =
   100

Математическую функцию можно использовать внутри консоли или программы как обычно

Еще пример: 
y = @(x) sin(x)
a = y(pi)
a =
 1.2246e-16
a = y(pi/2)
a = 1

3. Матрицы и векторы
Задаются 

а. Напрямую, строчные элементы отделяются запятой, строки отделяются точкой с запятой
a = [1,2,3;1,2,2;0,0,1]

a =
     1     2     3
   
  	1     2     2

	0     0     1

б. через случайный генератор
b = randi(m,n),
где m - интервал изменения чисел (от нуля до m), n - порядок матрицы

Пример: 
 b = randi(10,3)
 b =
     8     5     8
	 8     5     8

	 2     7     3

Упоминание элементов матрицы: в круглых скобках. 
Например, 
b(3,1)
ans =
 2

в. Ленивый способ: присваивать последнему номеру матрицы, например, с(4,5) некоторое число. Создается матрица 4 х 5, все незаданные числа будут нулевыми. Их можно редактировать руками во вкладке Workspace
Пример: с(4,5) = 1

г. Нулевая матрица с = zeros(n); Матрица из единиц: с = ones(n); n - размерность матрицы
Для задания вектора используем упоминание об одной строке
с = zeros(1,n); с = ones(1,n);

д. Можно вывести (или присвоить) сразу весь столбец (строку). Для этого нужно при вызове значения матрицы поставить двоеточие:
Например, для матрицы с = ones(3) операция с(:,3) выдаст третий столбец, а операция с(2,:) даст вторую строку. В обоиз случаях результатом будет вектор.
с(:,:) выведет всю матрицу (так делать неэффективно - достаточно написать имя матрицы).

Матрицы можно присваивать друг другу. В колонке Workspace можно увидеть значения матриц и исправить некоторые из них руками (удобно).

e. Матрицы и векторы позвояют работать с логическими условиями. Это называется логическим индексированием.
Например, пусть 
b =
     8     5     8
	8     5     8

	2     7     3
запись c = b((b>=2) & (b<4)) выдает вектор-столбец 
c' = (2 3); % или все числа матрицы, что больше или равны 2, но меньшк 4.
Это позволяет не использовать циклы и решать задачи эффективнее
 
4. Циклы

а. Цикл с известным числом итераций 

for <index> = <values>
   <statements>
end

Например, 

for i=1:length(x)
    for j=1:length(y)
            x(1,i) = y(1,j);
            k = k+1;
        end
    end

Можно выполнять циклы с шагом, например, 3 (шаг равен единице по умолчанию):

for i=1:3:length(x)
    for j=1:3:length(y)
            x(1,i) = y(1,j);
            k = k+1;
        end
    end

б. Циклы с предусловием

while <expression>
    <statements>
end

цикл выполняется до тех пор, пока логическое выражение <expression> не становится истинным (проверять на истинность не нужно).

Пример: вычисление факториала ()

задаем n
f = n;
while n > 1
    n = n-1;
    f = f*n;
end
disp(['n! = ' num2str(f)])

служебная команда break прерывает выполнение цикла (не рекомендуется к использованию)

7. Операторы условия (ветвления)

if <expression>
    <statements>
elseif <expression1>
    <statements1>
elseif <expression2>
    <statements2>
else
    <statements>
end

Блоки с операторами elseif и else не обязательны. Они выполняются, если условие стоящего перед ними оператора if ложно. Отличие elseif от else только в одном - elseif можно использовать в теле ветвления несколько раз, а else  - только единожды. elseif удобен при множественном переборе вариантов, а else - при единственном выборе (когда других вариантов не осталось).

Общая конструкция:

if <выражение1>
	<операторы1>       % выполняются, если истинно выражение1
elseif <выражение2>
	<операторы2>       % выполняются, если истинно выражение2
...
elseif <выражениеN>
	<операторыN>       % выполняются, если истинно выражениеN
else 
	<операторы N+1> % выполняются, если все предыдущие логические выражения ложны
end 

Пример: 

for c = 1:3
    for r = 1:3
        
        if r == c
            A(r,c) = 2;
        elseif abs(r-c) == 1
            A(r,c) = -1;
        else
            A(r,c) = 0;
        end
        
    end
end

Ответ: 

A =
     2    -1     0
 
	-1     2    -1
	0    -1     2

8. Работа с графикой

Отрисовка графиков функций

figure %создаем окно для формирования рисунка

plot(X,Y,LineSpec) %задаем параметры построения графика по точкам X для значений Y (это массивы). 
LineSpec - это стринговый набор атрибутов отрисовки.
Например

plot(имя_массива_для_отрисовки,'Color',[.2,.2,.2]) %задаем цвет графика для отрисовки в формате RGB = (0.2;0.2;0.2)


Возможные атрибуты команды plot:

plot(x,y,'--r','LineWidth',2,'MarkerSize',10,'MarkerEdgeColor','b','MarkerFaceColor',[0.5,0.5,0.5]);

'--r': красная пунктирная линия
'-r' : красная сплошная линия
':r' : красная точечная линия
'xr' : красный график крестиками
и т.д.
Все остальные атрибуты - в help
 
':k' черная точечная линия

После оператора plot должна идти строка

hold on %замораживаем точки просмотра
Можно указывать интервал изменения вектора для отрисовки. Например, 

plot(n-100:n,имя_нашего_вектора,'r','LineWidth',2);

Заголовки рисунка:

title('Незамысловатый текст');

Подписи к обозначениям переменных
legend('Первое','Второе','Location','NorthEast'); %расположение в верхнем правом углу рисунка

Текстовые метки осей
xlabel('Days')
ylabel('Function')

Для отрисовки второго рисунка в одной программе нужно опять повторить весь код, начиная с оператора figure

Переключение точки наблюдения между рисунками: 
figure (1);
или 
figure (2);

9. Работа с файлами

Матлаб имеет широкие возможности импорта данных и работы с данными в виде таблиц. Но остановимся на классической задаче чтения данных (текста) из внешнего файла и обработки данных в нем.

filename - текстовая строка с именем файла в корневой папке для компилятора Mаtlaba. 

fopen(filename,'w+'); - открывает или создает новый файл для чтения и записи. Если файл уже существует, его содержание стирается. 

Всего 8 различных аттрибутов доступа к данным файлов.

fileID - идентификатор (числовая метка), выдаваемый Маткадом после попытки открытия файла. 
fileID  = -1, если файл не открывается.
fileID  = 1 для первого открытого файла, fileID  = 2 для второго открытого файла и тд.
filename = fopen(fileID) - возвращает полный путь к открытому файлу с меткой fileID. fileID должен иметь числовое значение.
fwrite(fileID,[1:9]); - запись вектора (1     2     3     4     5     6     7     8     9
) в файл.
fclose(fileID); - закрытие файла с меткой fileID
feof(fileID) - логическая метка конца файла
fgets(fileID) - читает всю строку из файла, включая спецсимволы
fprintf(fileID,formatSpec,A1,...,An) - записывает форматированный пользователем текст в файл. 
Например,
fileID = fopen('exp.txt','w');
fprintf(fileID,'%6s %12s\n','x','exp(x)', );
В файл выводится строка со сбросом каретки "     x       exp(x)"


